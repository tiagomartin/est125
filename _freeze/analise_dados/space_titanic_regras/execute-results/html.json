{
  "hash": "82b230c8a3da50e9b1dfed6e2f073d45",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Criando um sistema de recomendação baseado em regras de associação usando a base de dados Space Titanic\"\nformat: html\nexecute:\n  cache: true\n---\n\n\nJá pararam para pensar em como o Netflix sugere o próximo filme ou o Spotify acerta em cheio na sua playlist semanal? Por trás dessas \"mágicas\", existem algoritmos poderosos. Hoje, vamos desvendar um deles: as regras de associação.\n\nNesta análise, vamos mergulhar na base de dados Space Titanic do Kaggle para construir um sistema de recomendação simples, mas eficaz, baseado no famoso algoritmo Apriori.\n\n\n## O que são Regras de Associação?\n\nAs regras de associação são uma técnica de aprendizado de máquina não supervisionado usada para descobrir relações interessantes entre itens em um grande conjunto de dados. Pense em uma cesta de compras de supermercado: se um cliente compra pão e manteiga, qual a probabilidade de ele também comprar geleia?\n\nUma regra de associação é expressa na forma:\n\n$$A \\Longrightarrow B$$\n\n\nem que $A$ e $B$ são conjuntos de itens. $A$ é chamado de antecedente e $B$ é o consequente. Para avaliar a força de uma regra, usamos três métricas principais:\n\n- **Suporte (sup):** A proporção de transações que contêm tanto o antecedente quanto o consequente. Um suporte alto indica que a combinação de itens é frequente no conjunto de dados.\n\n$$sup(A∪B)= \\dfrac{\\text{Número de transações com A e B}}{\\text{Número total de transações}}$$ \n\n- **Confiança (conf):** A probabilidade de um item $B$ ser comprado, dado que um item $A$ já foi comprado.\n\n$$conf(A \\Longrightarrow B) = \\dfrac{sup(A∪B)}{sup(A)}$$\n\n\n- **Lift:** A métrica mais interessante para regras de associação! O lift mede o quão mais provável é que $B$ seja comprado quando $A$ é comprado, em comparação com a probabilidade de $B$ ser comprado sozinho.\n    - Se Lift > 1, a presença de $A$ aumenta a probabilidade de $B$.\n    - Se Lift = 1, $A$ e $B$ são independentes.\n    - Se Lift < 1, a presença de $A$ diminui a probabilidade de $B$.\n\n\n$$Lift(A \\Longrightarrow B) = \\dfrac{conf(A \\Longrightarrow B)}{sup(B)} = \\dfrac{sup(A∪B)}{sup(A) \\times sup(B)}$$\n\n\n## O Algoritmo Apriori\n\nO algoritmo Apriori é a espinha dorsal da mineração de regras de associação. Ele funciona em duas etapas principais:\n\n1. **Encontrar Conjuntos de Itens Frequentes:** O algoritmo identifica conjuntos de itens que aparecem juntos com uma frequência maior que um suporte mínimo pré-definido. Para evitar a explosão de combinações, ele usa a propriedade \"anti-monotônica\": se um conjunto de itens não é frequente, nenhum de seus superconjuntos pode ser frequente.\n\n2. **Gerar Regras de Associação:** A partir dos conjuntos de itens frequentes, ele gera regras de associação e calcula as métricas de confiança e lift.\n\n\n## Mãos à obra: Construindo nosso Sistema no R\n\n\nVamos usar a base de dados do Kaggle Space Titanic. Nosso objetivo é criar um \"sistema de recomendação\" para prever quais características (por exemplo, status de transporte, acomodação) estão associadas umas às outras. Para isso, precisamos transformar nossos dados em um formato de transações, onde cada linha é um \"cesto de compras\" do passageiro.\n\n\n## Pacotes utilizados \n\n\n::: {.cell}\n\n```{.r .cell-code}\nload <- function(pkg){\n  new.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n  if (length(new.pkg))\n    install.packages(new.pkg, dependencies = TRUE)\n  sapply(pkg, require, character.only = TRUE)\n} \n\n## Pacotes utilizados nessa análise\n\npackages = c(\"tidyverse\", \"tidymodels\", \"arules\", \"arulesViz\", \"funModeling\", \"tictoc\", \"future\", \"doFuture\", \"progressr\", \"recommenderlab\")\nload(packages)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     tidyverse     tidymodels         arules      arulesViz    funModeling \n          TRUE           TRUE           TRUE           TRUE           TRUE \n        tictoc         future       doFuture      progressr recommenderlab \n          TRUE           TRUE           TRUE           TRUE           TRUE \n```\n\n\n:::\n:::\n\n\n\n## Leitura dos dados\n \n\n::: {.cell}\n\n```{.r .cell-code}\ndados = read.csv(\"https://raw.githubusercontent.com/tiagomartin/est125/refs/heads/main/dados/space_titanic.csv\", na.strings = \"\") %>% \n  na.omit()\n\ndados %>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 6,606\nColumns: 14\n$ PassengerId  <chr> \"0001_01\", \"0002_01\", \"0003_01\", \"0003_02\", \"0004_01\", \"0…\n$ HomePlanet   <chr> \"Europa\", \"Earth\", \"Europa\", \"Europa\", \"Earth\", \"Earth\", …\n$ CryoSleep    <chr> \"False\", \"False\", \"False\", \"False\", \"False\", \"False\", \"Fa…\n$ Cabin        <chr> \"B/0/P\", \"F/0/S\", \"A/0/S\", \"A/0/S\", \"F/1/S\", \"F/0/P\", \"F/…\n$ Destination  <chr> \"TRAPPIST-1e\", \"TRAPPIST-1e\", \"TRAPPIST-1e\", \"TRAPPIST-1e…\n$ Age          <dbl> 39, 24, 58, 33, 16, 44, 26, 35, 14, 45, 32, 48, 28, 24, 4…\n$ VIP          <chr> \"False\", \"False\", \"True\", \"False\", \"False\", \"False\", \"Fal…\n$ RoomService  <dbl> 0, 109, 43, 0, 303, 0, 42, 0, 0, 39, 73, 719, 8, 0, 0, 0,…\n$ FoodCourt    <dbl> 0, 9, 3576, 1283, 70, 483, 1539, 785, 0, 7295, 0, 1, 974,…\n$ ShoppingMall <dbl> 0, 25, 0, 371, 151, 0, 3, 17, 0, 589, 1123, 65, 12, 0, 0,…\n$ Spa          <dbl> 0, 549, 6715, 3329, 565, 291, 0, 216, 0, 110, 0, 0, 2, 0,…\n$ VRDeck       <dbl> 0, 44, 49, 193, 2, 0, 0, 0, 0, 124, 113, 24, 7, 637, 0, 0…\n$ Name         <chr> \"Maham Ofracculy\", \"Juanna Vines\", \"Altark Susent\", \"Sola…\n$ Transported  <chr> \"False\", \"True\", \"False\", \"False\", \"True\", \"True\", \"True\"…\n```\n\n\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Engenharia de variáveis\ndados = dados %>%\n  separate(Cabin, c(\"CabinDeck\", \"CabinNum\", \"CabinSide\"), sep = \"/\", remove = TRUE) %>% \n  mutate(CabinDeck = as.factor(CabinDeck),\n         CabinSide = as.factor(CabinSide))\n```\n:::\n\n\n\nAntes de iniciarmos a modelagem, é essencial que os dados estejam no formato correto. O algoritmo Apriori, que usamos para regras de associação, trabalha exclusivamente com dados categóricos. Algumas variáveis originais, como `Age`, `RoomService` e `Spa`, são contínuas e precisam ser transformadas. Para isso, usamos a função `recipe()` encadeada ao pacote `tidymodels` para definir nosso *blueprint* de pré-processamento. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criar a receita para o pré-processamento\nrecipe_obj <- recipe(Transported ~ ., data = dados) %>%\n\n  # Transformar 'Age' em categorias (Jovem, Adulto, Idoso)\n  step_mutate(Age_cat = ifelse(Age < 18, \"Jovem\", \n                               ifelse(Age <= 50, \"Adulto\", \"Idoso\")), \n    RoomService_cat = ifelse(RoomService <= quantile(RoomService, 0.33), \"Baixo\", \n                             ifelse(RoomService <= quantile(RoomService, 0.66), \"Médio\", \"Alto\")),\n    FoodCourt_cat = ifelse(FoodCourt <= quantile(FoodCourt, 0.33), \"Baixo\", \n                           ifelse(FoodCourt <= quantile(FoodCourt, 0.66), \"Médio\", \"Alto\")),\n    ShoppingMall_cat = ifelse(ShoppingMall <= quantile(ShoppingMall, 0.33), \"Baixo\", \n                              ifelse(ShoppingMall <= quantile(ShoppingMall, 0.66), \"Médio\", \"Alto\")),\n    Spa_cat = ifelse(Spa <= quantile(Spa, 0.33), \"Baixo\", \n                     ifelse(Spa <= quantile(Spa, 0.66), \"Médio\", \"Alto\")),\n    VRDeck_cat = ifelse(VRDeck <= quantile(VRDeck, 0.33), \"Baixo\", \n                        ifelse(VRDeck <= quantile(VRDeck, 0.66), \"Médio\", \"Alto\"))\n  ) %>% \n  step_rm(Name, PassengerId, CabinNum, Age, RoomService, FoodCourt, ShoppingMall, Spa, VRDeck) %>% \n  step_string2factor(all_string()) \n```\n:::\n\n\nApós definirmos nosso plano de pré-processamento com o `recipe`, a próxima etapa é aplicar esse plano aos nossos dados. O objeto `recipe_obj` que criamos anteriormente é, na verdade, uma \"receita\" de como cozinhar os dados, mas os dados ainda não foram \"cozinhados\". É aqui que entram as funções `prep()` e `bake()`.\n\n1. `prep(recipe_obj, training = dados):` Esta função é o coração do processo. Ela prepara a receita, o que significa que ela \"aprende\" as transformações a partir dos seus dados de treinamento. Por exemplo, ao rodar o `prep`, a receita vai calcular os quantis para as variáveis `RoomService`, `FoodCourt`, etc., com base na distribuição dos dados (`training = dados`). Esse passo garante que as transformações sejam consistentes em todos os seus conjuntos de dados (treino e teste), evitando vazamento de informações.\n\n2. `bake(dados_processados, new_data = NULL):` Com a receita já preparada, a função `bake` aplica as transformações aos dados. No nosso caso, ao passar `new_data = NULL`, estamos pedindo para aplicar as transformações ao mesmo conjunto de dados que foi usado no `prep`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Preparar e aplicar a receita no conjunto de dados\ndados_processados <- prep(recipe_obj, training = dados)\n\n# Aplicar a receita no conjunto de dados\ndados_transf <- bake(dados_processados, new_data = NULL)\n\ndados_transf %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 6,606\nColumns: 13\n$ HomePlanet       <fct> Europa, Earth, Europa, Europa, Earth, Earth, Earth, E…\n$ CryoSleep        <fct> False, False, False, False, False, False, False, Fals…\n$ CabinDeck        <fct> B, F, A, A, F, F, F, F, B, B, F, G, F, F, F, G, F, E,…\n$ CabinSide        <fct> P, S, S, S, S, P, S, S, P, P, P, S, P, P, P, P, P, S,…\n$ Destination      <fct> TRAPPIST-1e, TRAPPIST-1e, TRAPPIST-1e, TRAPPIST-1e, T…\n$ VIP              <fct> False, False, True, False, False, False, False, False…\n$ Transported      <fct> False, True, False, False, True, True, True, True, Tr…\n$ Age_cat          <fct> Adulto, Adulto, Idoso, Adulto, Jovem, Adulto, Adulto,…\n$ RoomService_cat  <fct> Baixo, Alto, Alto, Baixo, Alto, Baixo, Alto, Baixo, B…\n$ FoodCourt_cat    <fct> Baixo, Alto, Alto, Alto, Alto, Alto, Alto, Alto, Baix…\n$ ShoppingMall_cat <fct> Baixo, Alto, Baixo, Alto, Alto, Baixo, Alto, Alto, Ba…\n$ Spa_cat          <fct> Baixo, Alto, Alto, Alto, Alto, Alto, Baixo, Alto, Bai…\n$ VRDeck_cat       <fct> Baixo, Alto, Alto, Alto, Médio, Baixo, Baixo, Baixo, …\n```\n\n\n:::\n:::\n\n\nAo final, a variável `dados_transf` conterá um novo dataframe com todas as transformações aplicadas: as variáveis contínuas foram discretizadas, as colunas desnecessárias foram removidas e as variáveis de texto foram convertidas para fatores. A chamada `glimpse()` nos permite dar uma olhada rápida na nova estrutura dos dados, confirmando que tudo foi processado conforme o esperado e que agora estamos prontos para aplicar o algoritmo Apriori. O pacote `arules`, que contém o algoritmo Apriori, exige que os dados estejam em um formato específico: um objeto de transações. A função `as()` aplicada ao nosso dataframe `dados_transf` e especificada como `transactions` transforma cada linha do dataframe em uma \"cesta de compras\" e cada coluna em um \"item\". \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Converter o dataset processado para o formato de transações\ndados_transacoes <- as(dados_transf, \"transactions\")\n```\n:::\n\n\nPodemos então, visualizar as primeiras transações e ter certeza de que a conversão foi feita corretamente.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Verificando as primeiras transações\ninspect(dados_transacoes[1:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    items                      transactionID\n[1] {HomePlanet=Europa,                     \n     CryoSleep=False,                       \n     CabinDeck=B,                           \n     CabinSide=P,                           \n     Destination=TRAPPIST-1e,               \n     VIP=False,                             \n     Transported=False,                     \n     Age_cat=Adulto,                        \n     RoomService_cat=Baixo,                 \n     FoodCourt_cat=Baixo,                   \n     ShoppingMall_cat=Baixo,                \n     Spa_cat=Baixo,                         \n     VRDeck_cat=Baixo}                     1\n[2] {HomePlanet=Earth,                      \n     CryoSleep=False,                       \n     CabinDeck=F,                           \n     CabinSide=S,                           \n     Destination=TRAPPIST-1e,               \n     VIP=False,                             \n     Transported=True,                      \n     Age_cat=Adulto,                        \n     RoomService_cat=Alto,                  \n     FoodCourt_cat=Alto,                    \n     ShoppingMall_cat=Alto,                 \n     Spa_cat=Alto,                          \n     VRDeck_cat=Alto}                      2\n[3] {HomePlanet=Europa,                     \n     CryoSleep=False,                       \n     CabinDeck=A,                           \n     CabinSide=S,                           \n     Destination=TRAPPIST-1e,               \n     VIP=True,                              \n     Transported=False,                     \n     Age_cat=Idoso,                         \n     RoomService_cat=Alto,                  \n     FoodCourt_cat=Alto,                    \n     ShoppingMall_cat=Baixo,                \n     Spa_cat=Alto,                          \n     VRDeck_cat=Alto}                      3\n```\n\n\n:::\n:::\n\n\nPor fim, geramos um gráfico que mostra a frequência dos itens mais comuns. Essa visualização é crucial para entender a distribuição dos nossos dados e nos ajuda a definir um valor de `support` adequado para o algoritmo Apriori. Itens muito raros não formarão regras fortes, então é bom ver quais são os mais frequentes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nitemFrequencyPlot(dados_transacoes, topN = 20, type = \"relative\")\n```\n\n::: {.cell-output-display}\n![](space_titanic_regras_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nAnalisando o gráfico, podemos tirar algumas conclusões importantes sobre os passageiros do Space Titanic:\n\n- **Itens Mais Frequentes:** O item mais frequente de longe é `VIP=False`. Isso significa que a grande maioria dos passageiros não era VIP. Em seguida, temos `Age_cat=Adulto`, indicando que a maior parte da tripulação estava na faixa etária adulta, e `Destination=TRAPPIST-1e`, que era o destino mais comum.\n\n- **Foco nas Variáveis de Gastos:** As variáveis de gastos (`RoomService`, `FoodCourt`, `ShoppingMall`, `Spa`, `VRDeck`), que discretizamos em categorias, aparecem com maior frequência na categoria Baixo. Isso sugere que a maioria dos passageiros não gastou muito nesses serviços. Note que `ShoppingMall_cat=Baixo`, `RoomService_cat=Baixo`, `FoodCourt_cat=Baixo`, `VRDeck_cat=Baixo` e `Spa_cat=Baixo` estão todos entre os itens mais frequentes.\n\n- **Variáveis-Chave de Transporte:** A variável `Transported=False` e `Transported=True` aparecem com frequências muito parecidas, por volta de 50%. Isso confirma que o dataset está bem balanceado em relação ao nosso alvo, que é a variável `Transported`. A ligeira diferença pode ser importante, mas o balanço é bom para a modelagem.\n\n### O que podemos esperar do Apriori?\n\nItens com alta frequência, como `VIP=False` e `Age_cat=Adulto`, terão um suporte alto. Por isso, ao rodar o algoritmo Apriori, é provável que vejamos muitas regras de associação que envolvam esses itens. Itens menos frequentes, como as categorias Alto de gastos, só aparecerão em regras se tiverem uma associação muito forte com outros itens.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplan(multisession, workers = parallel::detectCores() - 1)\nregisterDoFuture()\n\nhandlers(\"txtprogressbar\")  # ou \"progress\"\n\ntic()\nwith_progress({\n# Aplicando o algoritmo Apriori para encontrar regras de associação\nregras <- apriori(dados_transacoes, \n                  parameter = list(supp = 0.2, conf = 0.8, target = \"rules\"))\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nApriori\n\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support minlen\n        0.8    0.1    1 none FALSE            TRUE       5     0.2      1\n maxlen target  ext\n     10  rules TRUE\n\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n\nAbsolute minimum support count: 1321 \n\nset item appearances ...[0 item(s)] done [0.00s].\nset transactions ...[40 item(s), 6606 transaction(s)] done [0.00s].\nsorting and recoding items ... [25 item(s)] done [0.00s].\ncreating transaction tree ... done [0.00s].\nchecking subsets of size 1 2 3 4 5 6 7 8 done [0.01s].\nwriting ... [2911 rule(s)] done [0.00s].\ncreating S4 object  ... done [0.00s].\n```\n\n\n:::\n\n```{.r .cell-code}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0.03 sec elapsed\n```\n\n\n:::\n\n```{.r .cell-code}\n# Vamos ordenar as regras por 'lift' para encontrar as associações mais interessantes\nregras_sorted <- sort(regras, by = \"lift\")\n\n# Inspecionar as 10 melhores regras\ninspect(head(regras_sorted, n = 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     lhs                          rhs             support confidence  coverage     lift count\n[1]  {HomePlanet=Earth,                                                                      \n      FoodCourt_cat=Baixo,                                                                   \n      ShoppingMall_cat=Baixo,                                                                \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2026945  0.9260028 0.2188919 3.100443  1339\n[2]  {HomePlanet=Earth,                                                                      \n      VIP=False,                                                                             \n      FoodCourt_cat=Baixo,                                                                   \n      ShoppingMall_cat=Baixo,                                                                \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2026945  0.9260028 0.2188919 3.100443  1339\n[3]  {HomePlanet=Earth,                                                                      \n      RoomService_cat=Baixo,                                                                 \n      Spa_cat=Baixo,                                                                         \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2025431  0.9195876 0.2202543 3.078964  1338\n[4]  {HomePlanet=Earth,                                                                      \n      VIP=False,                                                                             \n      RoomService_cat=Baixo,                                                                 \n      Spa_cat=Baixo,                                                                         \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2025431  0.9195876 0.2202543 3.078964  1338\n[5]  {HomePlanet=Earth,                                                                      \n      ShoppingMall_cat=Baixo,                                                                \n      Spa_cat=Baixo,                                                                         \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2022404  0.9188446 0.2201029 3.076476  1336\n[6]  {HomePlanet=Earth,                                                                      \n      VIP=False,                                                                             \n      ShoppingMall_cat=Baixo,                                                                \n      Spa_cat=Baixo,                                                                         \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2022404  0.9188446 0.2201029 3.076476  1336\n[7]  {HomePlanet=Earth,                                                                      \n      RoomService_cat=Baixo,                                                                 \n      ShoppingMall_cat=Baixo,                                                                \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2028459  0.9184373 0.2208598 3.075112  1340\n[8]  {HomePlanet=Earth,                                                                      \n      VIP=False,                                                                             \n      RoomService_cat=Baixo,                                                                 \n      ShoppingMall_cat=Baixo,                                                                \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2028459  0.9184373 0.2208598 3.075112  1340\n[9]  {HomePlanet=Earth,                                                                      \n      FoodCourt_cat=Baixo,                                                                   \n      Spa_cat=Baixo,                                                                         \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2023918  0.9176390 0.2205571 3.072439  1337\n[10] {HomePlanet=Earth,                                                                      \n      VIP=False,                                                                             \n      FoodCourt_cat=Baixo,                                                                   \n      Spa_cat=Baixo,                                                                         \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2023918  0.9176390 0.2205571 3.072439  1337\n```\n\n\n:::\n:::\n\n\n\nObservando as regras, podemos notar alguns padrões muito claros e significativos sobre os passageiros do Space Titanic.\n\n### O Padrão Principal: HomePlanet + Gastos Baixos -> Cabin Deck G\n\nA característica mais notável é que a grande maioria das regras aponta para a mesma conclusão: passageiros que vêm do planeta Terra e têm gastos baixos em diversos serviços a bordo (`RoomService`, `FoodCourt`, `ShoppingMall`, `Spa`, `VRDeck`) tendem a estar localizados na cabine do Deck G.\n\n- **Exemplo de Regra ([1]):** `{HomePlanet=Earth, FoodCourt_cat=Baixo, ShoppingMall_cat=Baixo, VRDeck_cat=Baixo} => {CabinDeck=G}`.\n    - **Suporte (0.202):** Essa regra aparece em aproximadamente 20,2% de todas as transações, o que é um valor alto e indica que a combinação de `HomePlanet=Earth` com gastos baixos e a cabine no `Deck=G` é bastante comum.\n    - **Confiança (0.926):** A confiança de 92,6% é extremamente alta. Isso significa que, se um passageiro é do planeta Terra e tem gastos baixos nos serviços listados, a probabilidade de ele estar no Deck G é de 92,6%.\n    - **Lift (3.100):** O lift de 3,1 é a métrica mais importante aqui. Ele nos diz que a probabilidade de um passageiro que vem da Terra e gasta pouco estar no Deck G é 3,1 vezes maior do que a probabilidade de um passageiro qualquer estar no Deck G. Isso indica que a associação não é aleatória; ela é forte e significativa.\n    - **coverage (0.218):** Isso significa que aproximadamente 21,8% de todos os passageiros se encaixavam nas condições do antecedente (`HomePlanet=Earth, FoodCourt_cat=Baixo, ShoppingMall_cat=Baixo, VRDeck_cat=Baixo`).\n    - **count (1339):** Significa que 1339 passageiros se encaixavam em todas as condições da regra: eles vieram da Terra, tiveram gastos baixos nos serviços listados e estavam na cabine do Deck G.\n\n\n### O Papel da Variável VIP\n\nOutro ponto que salta aos olhos é a presença da variável `VIP=False` em quase todas as regras. As regras ímpares (1, 3, 5, etc.) são seguidas por regras pares idênticas, mas com o antecedente `VIP=False` adicionado. No entanto, os valores de `support`, `confidence`, `coverage` e `lift` são exatamente os mesmos.\n\n#### Por que isso acontece?\n\nO gráfico de frequência de itens que vimos anteriormente já nos mostrou que `VIP=False` era um dos itens mais frequentes, com uma frequência acima de 90%.\n\nO algoritmo Apriori encontra as regras mais fortes. Como a maioria esmagadora dos passageiros não era VIP, a inclusão de `VIP=False` nos antecedentes não altera a proporção de transações que satisfazem a regra. Em essência, a presença de `VIP=False` é tão comum que se torna quase redundante.\n\nIsso é um bom insight sobre os dados: a variável `VIP` não é um fator importante para determinar a cabine no Deck G, pois a maioria dos passageiros, sejam eles VIP ou não, já se encaixam nas outras condições da regra.\n\n\nAgora que já exploramos as regras de associação gerais, vamos focar em um objetivo mais específico: entender quais características dos passageiros estão mais fortemente associadas ao seu status de transporte (`Transported=True`).\n\nPara isso, usamos um truque muito útil na função `apriori()`: o parâmetro `appearance`. Ao usar `appearance = list(rhs = \"Transported=True\", default = \"lhs\")`, estamos direcionando o algoritmo para que ele só procure por regras que tenham `Transported=True` no consequente (`rhs`). Isso nos permite criar um \"sistema de recomendação\" que nos diz \"se um passageiro tem as seguintes características, ele provavelmente foi transportado\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregras_transported <- apriori(dados_transacoes,\n                            parameter = list(support = 0.2, confidence = 0.8, minlen = 2),\n                            appearance = list(rhs = \"Transported=True\", default = \"lhs\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nApriori\n\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support minlen\n        0.8    0.1    1 none FALSE            TRUE       5     0.2      2\n maxlen target  ext\n     10  rules TRUE\n\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n\nAbsolute minimum support count: 1321 \n\nset item appearances ...[1 item(s)] done [0.00s].\nset transactions ...[40 item(s), 6606 transaction(s)] done [0.00s].\nsorting and recoding items ... [25 item(s)] done [0.00s].\ncreating transaction tree ... done [0.00s].\nchecking subsets of size 1 2 3 4 5 6 7 8 done [0.00s].\nwriting ... [64 rule(s)] done [0.00s].\ncreating S4 object  ... done [0.00s].\n```\n\n\n:::\n\n```{.r .cell-code}\nregras_transported_sorted <- sort(regras_transported, by = \"lift\")\n\n# Inspecionar as 10 melhores regras\ninspect(head(regras_transported_sorted, n = 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     lhs                          rhs                  support confidence  coverage     lift count\n[1]  {CryoSleep=True}          => {Transported=True} 0.2883742  0.8168954 0.3530124 1.622005  1905\n[2]  {CryoSleep=True,                                                                             \n      Spa_cat=Baixo}           => {Transported=True} 0.2883742  0.8168954 0.3530124 1.622005  1905\n[3]  {CryoSleep=True,                                                                             \n      VRDeck_cat=Baixo}        => {Transported=True} 0.2883742  0.8168954 0.3530124 1.622005  1905\n[4]  {CryoSleep=True,                                                                             \n      FoodCourt_cat=Baixo}     => {Transported=True} 0.2883742  0.8168954 0.3530124 1.622005  1905\n[5]  {CryoSleep=True,                                                                             \n      RoomService_cat=Baixo}   => {Transported=True} 0.2883742  0.8168954 0.3530124 1.622005  1905\n[6]  {CryoSleep=True,                                                                             \n      ShoppingMall_cat=Baixo}  => {Transported=True} 0.2883742  0.8168954 0.3530124 1.622005  1905\n[7]  {CryoSleep=True,                                                                             \n      Spa_cat=Baixo,                                                                              \n      VRDeck_cat=Baixo}        => {Transported=True} 0.2883742  0.8168954 0.3530124 1.622005  1905\n[8]  {CryoSleep=True,                                                                             \n      FoodCourt_cat=Baixo,                                                                        \n      Spa_cat=Baixo}           => {Transported=True} 0.2883742  0.8168954 0.3530124 1.622005  1905\n[9]  {CryoSleep=True,                                                                             \n      RoomService_cat=Baixo,                                                                      \n      Spa_cat=Baixo}           => {Transported=True} 0.2883742  0.8168954 0.3530124 1.622005  1905\n[10] {CryoSleep=True,                                                                             \n      ShoppingMall_cat=Baixo,                                                                     \n      Spa_cat=Baixo}           => {Transported=True} 0.2883742  0.8168954 0.3530124 1.622005  1905\n```\n\n\n:::\n:::\n\n\nAo analisar as regras, um padrão se destaca de forma clara e dominante: o estado de sono criogênico.\n\n- **Regra Principal:** A primeira e mais importante regra é [1] `{CryoSleep=True} => {Transported=True}`.\n      - **support (0.288):** Quase 29% de todos os passageiros foram colocados em sono criogênico E foram transportados. Isso demonstra que essa é uma combinação comum nos dados.\n      - **confidence (0.816):** Se um passageiro foi colocado em sono criogênico, há uma probabilidade de mais de 81% de ele ter sido transportado. Esta é uma previsão muito confiável.\n      - **lift (1.622):** O lift de 1.62 nos diz que a probabilidade de um passageiro ser transportado, sabendo que ele está em sono criogênico, é 1,62 vezes maior do que a probabilidade geral de transporte na nave. Isso confirma que a associação não é aleatória.\n\n\nAs regras de `[2]` a `[10]` são apenas variações da primeira. Elas adicionam um ou mais itens de gastos baixos (`Spa_cat=Baixo`, `VRDeck_cat=Baixo`, etc.) ao antecedente, mas os valores de `support`, `confidence`, `coverage`, `lift` e `count` permanecem exatamente os mesmos.\n\nIsso significa que a variável `CryoSleep=True` sozinha é o fator determinante para a previsão. A adição de outras características, como gastos baixos em serviços, não aumenta a confiança nem a relevância da regra, porque todos os passageiros em sono criogênico já têm gastos nulos ou baixos nesses serviços. O algoritmo Apriori está essencialmente nos mostrando que a informação `CryoSleep=True` já contém, de forma implícita, a informação de que os gastos são baixos.\n\nAgora que identificamos as regras de associação mais relevantes para o transporte de passageiros, a melhor forma de consolidar nosso entendimento é através de uma **visualização**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(regras_transported_sorted[1:10], method = \"graph\", engine = \"htmlwidget\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-8668aeeca3eda88722af\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-8668aeeca3eda88722af\">{\"x\":{\"nodes\":{\"id\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],\"label\":[\"CryoSleep=True\",\"Transported=True\",\"RoomService_cat=Baixo\",\"FoodCourt_cat=Baixo\",\"ShoppingMall_cat=Baixo\",\"Spa_cat=Baixo\",\"VRDeck_cat=Baixo\",\"rule 1\",\"rule 2\",\"rule 3\",\"rule 4\",\"rule 5\",\"rule 6\",\"rule 7\",\"rule 8\",\"rule 9\",\"rule 10\"],\"group\":[1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2],\"value\":[1,1,1,1,1,1,1,50.5,50.5,50.5,50.5,50.5,50.5,50.5,50.5,50.5,50.5],\"color\":[\"#CBD2FC\",\"#CBD2FC\",\"#CBD2FC\",\"#CBD2FC\",\"#CBD2FC\",\"#CBD2FC\",\"#CBD2FC\",\"#EE9797\",\"#EE9797\",\"#EE9797\",\"#EE9797\",\"#EE9797\",\"#EE9797\",\"#EE9797\",\"#EE9797\",\"#EE9797\",\"#EE9797\"],\"title\":[\"CryoSleep=True\",\"Transported=True\",\"RoomService_cat=Baixo\",\"FoodCourt_cat=Baixo\",\"ShoppingMall_cat=Baixo\",\"Spa_cat=Baixo\",\"VRDeck_cat=Baixo\",\"<B>[1]<\\/B><BR><B>{CryoSleep=True}<\\/B><BR>&nbsp;&nbsp; => <B>{Transported=True}<\\/B><BR><BR>support = 0.288<BR>confidence = 0.817<BR>coverage = 0.353<BR>lift = 1.62<BR>count = 1900<BR>order = 2<BR>id = 1\",\"<B>[2]<\\/B><BR><B>{CryoSleep=True,<BR>&nbsp;&nbsp;Spa_cat=Baixo}<\\/B><BR>&nbsp;&nbsp; => <B>{Transported=True}<\\/B><BR><BR>support = 0.288<BR>confidence = 0.817<BR>coverage = 0.353<BR>lift = 1.62<BR>count = 1900<BR>order = 3<BR>id = 2\",\"<B>[3]<\\/B><BR><B>{CryoSleep=True,<BR>&nbsp;&nbsp;VRDeck_cat=Baixo}<\\/B><BR>&nbsp;&nbsp; => <B>{Transported=True}<\\/B><BR><BR>support = 0.288<BR>confidence = 0.817<BR>coverage = 0.353<BR>lift = 1.62<BR>count = 1900<BR>order = 3<BR>id = 3\",\"<B>[4]<\\/B><BR><B>{CryoSleep=True,<BR>&nbsp;&nbsp;FoodCourt_cat=Baixo}<\\/B><BR>&nbsp;&nbsp; => <B>{Transported=True}<\\/B><BR><BR>support = 0.288<BR>confidence = 0.817<BR>coverage = 0.353<BR>lift = 1.62<BR>count = 1900<BR>order = 3<BR>id = 4\",\"<B>[5]<\\/B><BR><B>{CryoSleep=True,<BR>&nbsp;&nbsp;RoomService_cat=Baixo}<\\/B><BR>&nbsp;&nbsp; => <B>{Transported=True}<\\/B><BR><BR>support = 0.288<BR>confidence = 0.817<BR>coverage = 0.353<BR>lift = 1.62<BR>count = 1900<BR>order = 3<BR>id = 5\",\"<B>[6]<\\/B><BR><B>{CryoSleep=True,<BR>&nbsp;&nbsp;ShoppingMall_cat=Baixo}<\\/B><BR>&nbsp;&nbsp; => <B>{Transported=True}<\\/B><BR><BR>support = 0.288<BR>confidence = 0.817<BR>coverage = 0.353<BR>lift = 1.62<BR>count = 1900<BR>order = 3<BR>id = 6\",\"<B>[7]<\\/B><BR><B>{CryoSleep=True,<BR>&nbsp;&nbsp;Spa_cat=Baixo,<BR>&nbsp;&nbsp;VRDeck_cat=Baixo}<\\/B><BR>&nbsp;&nbsp; => <B>{Transported=True}<\\/B><BR><BR>support = 0.288<BR>confidence = 0.817<BR>coverage = 0.353<BR>lift = 1.62<BR>count = 1900<BR>order = 4<BR>id = 7\",\"<B>[8]<\\/B><BR><B>{CryoSleep=True,<BR>&nbsp;&nbsp;FoodCourt_cat=Baixo,<BR>&nbsp;&nbsp;Spa_cat=Baixo}<\\/B><BR>&nbsp;&nbsp; => <B>{Transported=True}<\\/B><BR><BR>support = 0.288<BR>confidence = 0.817<BR>coverage = 0.353<BR>lift = 1.62<BR>count = 1900<BR>order = 4<BR>id = 8\",\"<B>[9]<\\/B><BR><B>{CryoSleep=True,<BR>&nbsp;&nbsp;RoomService_cat=Baixo,<BR>&nbsp;&nbsp;Spa_cat=Baixo}<\\/B><BR>&nbsp;&nbsp; => <B>{Transported=True}<\\/B><BR><BR>support = 0.288<BR>confidence = 0.817<BR>coverage = 0.353<BR>lift = 1.62<BR>count = 1900<BR>order = 4<BR>id = 9\",\"<B>[10]<\\/B><BR><B>{CryoSleep=True,<BR>&nbsp;&nbsp;ShoppingMall_cat=Baixo,<BR>&nbsp;&nbsp;Spa_cat=Baixo}<\\/B><BR>&nbsp;&nbsp; => <B>{Transported=True}<\\/B><BR><BR>support = 0.288<BR>confidence = 0.817<BR>coverage = 0.353<BR>lift = 1.62<BR>count = 1900<BR>order = 4<BR>id = 10\"],\"shape\":[\"box\",\"box\",\"box\",\"box\",\"box\",\"box\",\"box\",\"circle\",\"circle\",\"circle\",\"circle\",\"circle\",\"circle\",\"circle\",\"circle\",\"circle\",\"circle\"],\"x\":[-0.1133712602140903,0.01892566867284518,0.6493562477639709,-0.6685920778113281,1,0.3290196860614745,-1,-0.7504876735109426,0.6766397579444261,-0.7182252393799773,-0.5587451795341367,0.177020678697642,0.3977782537274113,-0.3287867796304488,-0.1613924185755899,0.4624966572567424,0.614389027509088],\"y\":[-0.02366264854441458,-0.01952350253796287,1,-1,-0.8623205093864997,0.000811968512673511,0.78331084068228,-0.09961403781783973,0.06578469053303504,0.352366775497843,-0.5162624411268579,0.6062031310932803,-0.5842896329344003,0.4035818864256495,-0.5089587873723566,0.4299740607633491,-0.3592860590906164]},\"edges\":{\"from\":[1,1,6,1,7,1,4,1,3,1,5,1,6,7,1,4,6,1,3,6,1,5,6,8,9,10,11,12,13,14,15,16,17],\"to\":[8,9,9,10,10,11,11,12,12,13,13,14,14,14,15,15,15,16,16,16,17,17,17,2,2,2,2,2,2,2,2,2,2],\"arrows\":[\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":false},\"physics\":{\"stabilization\":false},\"interaction\":{\"hover\":true,\"zoomSpeed\":1}},\"groups\":[\"1\",\"2\"],\"width\":null,\"height\":null,\"idselection\":{\"enabled\":true,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":null,\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"igraphlayout\":{\"type\":\"square\"},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\",\"highlight\":{\"enabled\":true,\"hoverNearest\":true,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nO gráfico de rede mostra as conexões entre os diferentes itens (nós) e as regras que os conectam (setas).\n\n- **Círculos Rosas:** Cada círculo rosa, rotulado como `rule 1`, `rule 2`, etc., é a representação de uma regra de associação completa.\n\n- **Caixas Azuis:** As caixas azuis, como `CryoSleep=True` ou `Transported=True`, representam os itens (variáveis e seus valores).\n\n- **Setas que entram no círculo rosa:** Indicam os itens que compõem o antecedente (`lhs`) da regra. Por exemplo, a seta que sai de `CryoSleep=True` e vai para o círculo `rule 1` nos diz que `CryoSleep=True` é parte do antecedente da Regra 1.\n\n- **Setas que saem do círculo rosa:** Indicam o item que é o consequente (`rhs`) da regra. Vemos que todas as setas saem dos círculos de regras e apontam para a caixa `Transported=True`. Isso confirma que `Transported=True` é o consequente de todas as regras que estamos analisando.\n\n\nAssim, podemos observar que:\n\n- **A Regra Principal (rule 1):** A seta que liga `CryoSleep=True` ao círculo `rule 1` e, em seguida, a seta que liga `rule 1` a `Transported=True` representa a regra `{CryoSleep=True} => {Transported=True}`.\n\n- **As Regras Derivadas (rule 2, rule 3, etc.):** As setas que ligam `CryoSleep=True` e as caixas de gastos baixos aos outros círculos de regras mostram que essas regras têm antecedentes mais complexos, mas ainda resultam na mesma previsão: `Transported=True`.\n\nO gráfico é uma ferramenta excelente para visualizar como os itens se conectam através das regras, mostrando que todos os caminhos dos antecedentes convergem para a mesma previsão final.\n\n\n\n## Construindo um sistema de recomendação simples, baseado em regras de associação\n\n\nAs regras de associação são uma técnica de mineração de dados que identifica padrões e relações entre itens em um grande conjunto de transações. Pense na clássica análise de cesta de compras: a regra `{Pão, Manteiga} => {Geleia}` sugere que clientes que compram pão e manteiga também tendem a comprar geleia.\n\nUm sistema de recomendação usa essa mesma lógica. Em vez de prever a compra de geleia, ele pode prever o interesse em um filme, a alocação de um passageiro em uma cabine, ou a alta probabilidade de um evento acontecer.\n\n\nO algoritmo Apriori no `recommenderlab` trabalha com uma matriz esparsa de avaliação binária, um tipo de estrutura de dados otimizado para sistemas de recomendação. Essa matriz representa a presença ou ausência de cada item (colunas) para cada transação ou usuário (linhas). A função `as()` do pacote `arules` é perfeita para essa tarefa, pois ela converte o objeto de transações (`dados_transacoes`) que criamos anteriormente para esse novo formato de forma eficiente.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndados_recommender <- as(dados_transacoes, \"binaryRatingMatrix\")\n```\n:::\n\n\nCom os dados agora no formato correto, estamos prontos para a etapa central do nosso sistema de recomendação: a criação do modelo.\n\nO extrato de código a seguir usa a função `Recommender()` do pacote `recommenderlab` para treinar nosso modelo de recomendação.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecom_model <- Recommender(data = dados_recommender,\n                           method = \"AR\",\n                           parameter = list(supp = 0.2, conf = 0.8, maxlen = 10))\n```\n:::\n\n\n\nAo executar esse código, o `recommenderlab` irá minerar as regras de associação no nosso conjunto de dados, criando um modelo que pode ser usado para gerar previsões para novos passageiros. Depois de treinar o modelo com `Recommender()`, as regras de associação descobertas são armazenadas dentro do objeto `recom_model`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# O objeto 'recom_model' armazena as regras de associação.\n# Podemos extrair e inspecionar as regras encontradas.\nmodel_details <- getModel(recom_model)\nregras_finais <- model_details$rule_base\n\nregras_finais_sorted <- sort(regras_finais, by = \"lift\")\n\n# Vamos inspecionar as regras encontradas pelo recommenderlab\ninspect(head(regras_finais_sorted, n = 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     lhs                          rhs             support confidence  coverage     lift count\n[1]  {HomePlanet=Earth,                                                                      \n      FoodCourt_cat=Baixo,                                                                   \n      ShoppingMall_cat=Baixo,                                                                \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2026945  0.9260028 0.2188919 3.100443  1339\n[2]  {HomePlanet=Earth,                                                                      \n      VIP=False,                                                                             \n      FoodCourt_cat=Baixo,                                                                   \n      ShoppingMall_cat=Baixo,                                                                \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2026945  0.9260028 0.2188919 3.100443  1339\n[3]  {HomePlanet=Earth,                                                                      \n      RoomService_cat=Baixo,                                                                 \n      Spa_cat=Baixo,                                                                         \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2025431  0.9195876 0.2202543 3.078964  1338\n[4]  {HomePlanet=Earth,                                                                      \n      VIP=False,                                                                             \n      RoomService_cat=Baixo,                                                                 \n      Spa_cat=Baixo,                                                                         \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2025431  0.9195876 0.2202543 3.078964  1338\n[5]  {HomePlanet=Earth,                                                                      \n      ShoppingMall_cat=Baixo,                                                                \n      Spa_cat=Baixo,                                                                         \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2022404  0.9188446 0.2201029 3.076476  1336\n[6]  {HomePlanet=Earth,                                                                      \n      VIP=False,                                                                             \n      ShoppingMall_cat=Baixo,                                                                \n      Spa_cat=Baixo,                                                                         \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2022404  0.9188446 0.2201029 3.076476  1336\n[7]  {HomePlanet=Earth,                                                                      \n      RoomService_cat=Baixo,                                                                 \n      ShoppingMall_cat=Baixo,                                                                \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2028459  0.9184373 0.2208598 3.075112  1340\n[8]  {HomePlanet=Earth,                                                                      \n      VIP=False,                                                                             \n      RoomService_cat=Baixo,                                                                 \n      ShoppingMall_cat=Baixo,                                                                \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2028459  0.9184373 0.2208598 3.075112  1340\n[9]  {HomePlanet=Earth,                                                                      \n      FoodCourt_cat=Baixo,                                                                   \n      Spa_cat=Baixo,                                                                         \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2023918  0.9176390 0.2205571 3.072439  1337\n[10] {HomePlanet=Earth,                                                                      \n      VIP=False,                                                                             \n      FoodCourt_cat=Baixo,                                                                   \n      Spa_cat=Baixo,                                                                         \n      VRDeck_cat=Baixo}        => {CabinDeck=G} 0.2023918  0.9176390 0.2205571 3.072439  1337\n```\n\n\n:::\n:::\n\n\nA análise do resultado deste comando nos dará os mesmos insights que obtivemos com o pacote `arules`, mas agora dentro do fluxo de trabalho do `recommenderlab`. Nosso objetivo agora é colocar o modelo que treinamos em ação e gerar recomendações. Para isso, iremos \"simular\" dois novos passageiros para serem apresentados ao nosso sistema de recomendação.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Obter os nomes dos itens do modelo treinado\nitems_names <- colnames(dados_recommender)\n\n# 2. Criar uma matriz de zeros para todos os passageiros e itens\n# Vamos definir o número de passageiros que você quer avaliar\nnum_passageiros <- 2 \nnovos_passageiros_mat <- matrix(0, nrow = num_passageiros, ncol = length(items_names))\ncolnames(novos_passageiros_mat) <- items_names\nrownames(novos_passageiros_mat) <- c(\"Novo_Passageiro_01\", \"Novo_Passageiro_02\")\n\n# 3. Preencher a matriz com as características de cada passageiro\n# Passageiro 1: da Terra, com gastos baixos\nnovos_passageiros_mat[\"Novo_Passageiro_01\", \"HomePlanet=Earth\"] <- 1\nnovos_passageiros_mat[\"Novo_Passageiro_01\", \"RoomService_cat=Baixo\"] <- 1\nnovos_passageiros_mat[\"Novo_Passageiro_01\", \"FoodCourt_cat=Baixo\"] <- 1\n\n# Passageiro 2: VIP, Adulto e em sono criogênico\nnovos_passageiros_mat[\"Novo_Passageiro_02\", \"VIP=True\"] <- 1\nnovos_passageiros_mat[\"Novo_Passageiro_02\", \"Age_cat=Adulto\"] <- 1\nnovos_passageiros_mat[\"Novo_Passageiro_02\", \"CryoSleep=True\"] <- 1\n\n# 4. Converter a matriz consolidada para o formato binaryRatingMatrix\nnovos_passageiros_ratings <- as(novos_passageiros_mat, \"binaryRatingMatrix\")\n\n# 5. Gerar as recomendações\nrecommendations <- predict(recom_model, novos_passageiros_ratings, n = 5)\n\n# Inspecionar as recomendações para ambos os passageiros\nas(recommendations, \"list\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`0`\n[1] \"VIP=False\"              \"Spa_cat=Baixo\"          \"ShoppingMall_cat=Baixo\"\n[4] \"VRDeck_cat=Baixo\"       \"CabinDeck=G\"           \n\n$`1`\n[1] \"RoomService_cat=Baixo\"  \"FoodCourt_cat=Baixo\"    \"ShoppingMall_cat=Baixo\"\n[4] \"Spa_cat=Baixo\"          \"VRDeck_cat=Baixo\"      \n```\n\n\n:::\n:::\n\n\nO resultado será uma lista de \"recomendações\" para cada um deles. Com base nas regras de associação que descobrimos, o sistema nos dirá qual item é o mais provável para cada perfil. Isso fecha o ciclo do nosso projeto, mostrando como a mineração de dados pode se traduzir em um sistema prático e preditivo.\n\n\n### Análise das Recomendações\n\nO *output* está em formato de lista, onde cada item (`$0` e `$1`) corresponde a uma recomendação para um passageiro. A ordem das recomendações corresponde à ordem dos passageiros na matriz de entrada.\n\n1. Recomendação para o Primeiro Passageiro (`$0`): O modelo \"recomendou\" a seguinte lista de itens:\n\n`\"VIP=False\" \"Spa_cat=Baixo\" \"ShoppingMall_cat=Baixo\" \"VRDeck_cat=Baixo\" \"CabinDeck=G\"`\n\n - **O que o sistema viu:** Se o seu primeiro passageiro era o que vinha da Terra com gastos baixos (`RoomService`, `FoodCourt`, etc.), o modelo identificou as regras que se aplicam a esse perfil.\n\n - **O que o sistema recomendou:** O sistema listou os itens que, com base nas regras, estão mais fortemente associados a esse perfil. A recomendação mais importante aqui é `CabinDeck=G`. O sistema está basicamente dizendo: \"Com base nas características desse passageiro (vindo da Terra, gastos baixos), a cabine mais provável para ele é no Deck G.\" Os outros itens na lista são parte das regras que levaram a essa conclusão.\n\n2. Recomendação para o Segundo Passageiro ($1): O modelo \"recomendou\" a seguinte lista de itens:\n\n`\"RoomService_cat=Baixo\" \"FoodCourt_cat=Baixo\" \"ShoppingMall_cat=Baixo\" \"Spa_cat=Baixo\" \"VRDeck_cat=Baixo\"`\n\n - **O que o sistema viu:** Se o seu segundo passageiro era o VIP, adulto e em sono criogênico, a recomendação nos dá um insight diferente.\n\n - **O que o sistema recomendou:** A recomendação principal aqui é uma lista de itens que representam gastos baixos. Isso faz sentido, pois nossa análise anterior mostrou que a variável `CryoSleep=True` (sono criogênico) está quase sempre associada a gastos nulos ou baixos em todos os serviços. O sistema está recomendando a previsão de que, se o passageiro está em sono criogênico, ele provavelmente terá gastos baixos nesses serviços.\n\n\n### Conclusão\n\nO sistema de recomendação funcionou como esperado, aplicando as regras de associação para fazer previsões lógicas para cada perfil de passageiro.\n\n- Para o primeiro passageiro, a recomendação foi sobre a alocação da cabine.\n\n- Para o segundo passageiro, a recomendação foi sobre o comportamento de gastos, que é um item fortemente associado ao estado de sono criogênico.\n\nIsso demonstra como um sistema baseado em regras de associação pode ser usado para inferir diferentes tipos de informações com base nos padrões encontrados nos dados.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../site_libs/vis-9.1.0/vis-network.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/vis-9.1.0/vis-network.min.js\"></script>\n<script src=\"../site_libs/visNetwork-binding-2.1.2/visNetwork.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "c5f51f02ce2e7fd1b3d977bcd7625ecd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Desvendando o tidymodels: Um Guia para Estudantes de Ciência de Dados\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-summary: \"Mostrar código\"\n    embed-resources: true\neditor: visual\n---\n\nOlá, pessoal! Bom dia!\n\nHoje vamos desvendar um dos pacotes mais poderosos e versáteis no universo do R para quem trabalha com **Ciência de Dados**: o **`tidymodels`**. Se você já se aventurou em construir modelos preditivos, sabe que o processo pode ser um pouco… artesanal. O `tidymodels` chega para organizar essa bagunça e transformar a construção de modelos em algo mais intuitivo, padronizado e, claro, *tidy*!\n\n---\n\n## O que é o `tidymodels`?\n\nPense no `tidymodels` como uma **coleção de pacotes** que trabalham em conjunto para oferecer uma estrutura unificada e consistente para o *machine learning* em R. Assim como o `tidyverse` revolucionou a manipulação de dados, o `tidymodels` faz o mesmo para a modelagem. Ele segue a filosofia *tidy* do R, o que significa que as funções são projetadas para serem encadeadas, facilitando a leitura e a escrita do código.\n\nEle cobre todas as etapas do fluxo de trabalho de *machine learning*, desde a preparação dos dados até a avaliação do modelo, passando pela seleção de modelos e ajuste de hiperparâmetros.\n\n---\n\n## Por que usar o `tidymodels`?\n\n1.  **Consistência**: Esqueça a necessidade de aprender sintaxes diferentes para cada algoritmo. O `tidymodels` oferece uma interface unificada.\n2.  **Organização**: Ele incentiva a criação de um fluxo de trabalho claro e modular, o que facilita a replicação e a manutenção do seu código.\n3.  **Flexibilidade**: Embora padronizado, ele é incrivelmente flexível, permitindo que você experimente diferentes modelos e abordagens.\n4.  **Integração**: Nascido e criado no ecossistema *tidy*, ele se integra perfeitamente com pacotes como `dplyr` e `ggplot2`.\n\n---\n\n## Componentes Chave do `tidymodels`\n\nO `tidymodels` é composto por diversos pacotes que desempenham funções específicas. Os principais que você precisa conhecer são:\n\n* `rsample`: Para criar amostras de dados (treino/teste, validação cruzada).\n* `recipes`: Para pré-processamento de dados (transformações, engenharia de *features*).\n* `parsnip`: Para especificar e ajustar diferentes tipos de modelos (regressão linear, árvores, SVMs, etc.) com uma sintaxe consistente.\n* `tune`: Para ajuste de hiperparâmetros de modelos.\n* `workflows`: Para empacotar modelos e *recipes* em um único objeto.\n* `yardstick`: Para medir o desempenho do modelo com diversas métricas.\n* `dials`: Para gerenciar espaços de *tuning* de hiperparâmetros.\n\n---\n\n## Mão na Massa: Um Exemplo Prático!\n\nVamos construir um modelo de regressão para prever os valores do famoso conjunto de dados `mtcars`. Nosso objetivo será prever o consumo de combustível (`mpg`) com base em outras características do carro.\n\nPrimeiro, vamos carregar os pacotes necessários:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Configurações para reprodutibilidade\nset.seed(123)\n```\n:::\n\n\n1. Preparação dos Dados com `rsample`\n\n\nVamos dividir nossos dados em conjuntos de treino e teste.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}